# test code for the ibmi_sql_execute and ibmi_sql_query module
# (c) 2020, zhuljbj <zhuljbj@cn.ibm.com>
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )
#
#Test dependent packages 
- block: 
      
    - include: install_rpm.yml 
      vars: 
        python: "{{python_version}}"
      with_list: "{{required_rpms}}"
    
    - name: create journal receiver
      ibmi_cl_command: 
        cmd: QSYS/CRTJRNRCV JRNRCV(QGPL/ANSIJSNRCV) TEXT('JOURNAL RECEIVER FOR ANSIBLE')

    - name: create journal
      ibmi_cl_command: 
        cmd: QSYS/CRTJRN JRN(QGPL/ANSIJSNJRN) JRNRCV(QGPL/ANSIJSNRCV) TEXT('JOURNAL FOR ANSIBLE')   

    - name: TC01 run sql execute module
      ibmi_sql_execute:
        sql: "create table ansible(id INT not null, name varchar(8), gender varchar(8))" 
      register: sql_execute_result_2
      ignore_errors: True
   
    - name: TC01 start journal
      ibmi_cl_command: 
        cmd: QSYS/STRJRNPF FILE(QGPL/ANSIBLE) JRN(QGPL/ANSIJSNJRN)  

    - name: TC02 run the SQL command to insert a row
      ibmi_sql_execute:
        sql: "INSERT INTO ansible VALUES('1', 'User1', 'Female')"

    - name: TC03 run the SQL command to query a table
      ibmi_sql_query:
        sql: "select * from ansible"
        expected_row_count: 1
      register: sql_query_result

    - name: TC04 run the SQL command to insert the row again
      ibmi_sql_execute:
        sql: "INSERT INTO ansible VALUES('2', 'User2', 'Male')"

    - name: TC05 run the SQL command to query the table and check row count
      ibmi_sql_query:
        sql: "select * from ansible"
        expected_row_count: 2

    - include: check_rpm.yml
      vars: 
        python: "{{python_version}}"
      with_list: "{{required_rpms}}"  
    
    - name: TC06 run sql query module with a valid sql
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
      register: sql_query_result_2

    - name: TC06 assert the returned parameters
      assert:
        that: 
          - sql_query_result_2.sql == "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO"
          - sql_query_result_2.rc == 0
          - sql_query_result_2.row | length == 1

    - name: TC07 run sql query module with a valid sql and expected_row_count
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
        expected_row_count: 1
      register: sql_query_result_3

    - name: TC07 assert the returned parameters
      assert:
        that: 
          - sql_query_result_3.sql == "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO"
          - sql_query_result_3.rc == 0
          - sql_query_result_2.row | length == 1
  
    - name: TC08 run sql execute to query a not existing table
      ibmi_sql_execute:
        sql: "SELECT * FROM QSYS2.ABC" 
      register: sql_execute_result_9
      failed_when: "'SQL0204' not in sql_execute_result_9.stderr"    

    - name: TC09 run a complex SQL command to query IPL
      ibmi_sql_query:
        expected_row_count: 1
        sql: "WITH last_ipl(ipl_time)

AS (SELECT job_entered_system_time

   FROM TABLE(qsys2.job_info(job_status_filter => '*ACTIVE', job_user_filter

   => 'QSYS')) x

   WHERE job_name = '000000/QSYS/SCPF')

, abnormal(abnormal_count)

AS (SELECT COUNT(*)

   FROM last_ipl, TABLE(qsys2.history_log_info(ipl_time, CURRENT TIMESTAMP)) x

   WHERE message_id IN ('CPC1225'))

SELECT

CASE

WHEN abnormal_count = 0

THEN 'NEXT IPL WILL BE NORMAL'

ELSE 'NEXT IPL WILL BE ABNORMAL - ABNORMAL END COUNT: ' concat abnormal_count

END

AS next_ipl_indicator FROM abnormal;"

    - name: TC10 run sql query an non-exist file
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.ABC" 
      register: sql_query_error_result_2
      failed_when: "'SQL0204' not in sql_query_error_result_2.stderr"

    - name: TC11 run sql query module without sql option
      ibmi_sql_query:
      register: sql_query_result_5
      ignore_errors: True

    - name: TC11 assert the previous task failed because lacks of required parameter sql
      assert:
        that:
          - "'missing required arguments: sql' in sql_query_result_5.msg"
    
    - name: TC12 run sql query module with a invalid value of sql
      ibmi_sql_query:
        sql: abcdefg
      register: sql_query_result_6
      ignore_errors: True

    - name: TC12 assert the previous task failed because lacks of required parameter sql
      assert:
        that:
          - sql_query_result_6.rc == 255
    
    - name: TC13 run sql query with a valid sql and an invalid expected_row_count
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
        expected_row_count: abc
      register: sql_query_result_7
      ignore_errors: True

    - name: TC13 assert the previous task failed because of invalid value of expected_row_count
      assert:
        that:
          - "'expected_row_count is of type ' in sql_query_result_7.msg"

    - name: TC14 run sql query module with a valid sql and a wrong expected_row_count
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
        expected_row_count: 10
      register: sql_query_result_4
      ignore_errors: True

    - name: TC14 assert the returned parameters
      assert:
        that: 
          - "'Unexpected row count returned'in sql_query_result_4.msg"
    
    - name: TC15 run sql query module with valid sql, expected_row_count and an invalid option abc
      ibmi_sql_query:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
        expected_row_count: 1
        invalid_opt: 123
      register: sql_query_result_8
      ignore_errors: True

    - name: TC15 assert the previous task failed because lacks of required parameter cmd
      assert:
        that:
          - "'Unsupported parameters' in sql_query_result_8.msg"
    
    - name: TC16 run sql execute without sql option
      ibmi_sql_execute:
      register: ibmi_sql_execute_3
      ignore_errors: True

    - name: TC16 assert the previous task failed because lacks of required parameter sql
      assert:
        that:
          - "'missing required arguments: sql' in ibmi_sql_execute_3.msg"
    
    - name: TC17 run sql execute with a invalid valud of sql option
      ibmi_sql_execute:
        sql: abcdefg
      register: ibmi_sql_execute_4
      ignore_errors: True

    - name: TC17 assert the previous task failed because lacks of required parameter sql
      assert:
        that:
          - ibmi_sql_execute_4.rc == 255 
    
    - name: TC18 run sql execute module with valid sql, expected_row_count and an invalid option abc
      ibmi_sql_execute:
        sql: "SELECT * FROM QSYS2.SYSTEM_STATUS_INFO" 
        invalid_opt: 123
      register: ibmi_sql_execute_5
      ignore_errors: True

    - name: TC18 assert the previous task failed because an invalid option
      assert:
        that:
          - "'Unsupported parameters' in ibmi_sql_execute_5.msg"
    
    - include: iasp.yml

  vars:
    required_rpms: [itoolkit, ibm_db]
    python_version: "{{ansible_python_interpreter.split('/')[-1]}}"   

  always:
    - name: end journal
      ibmi_cl_command: 
        cmd: QSYS/ENDJRNPF FILE(QGPL/ANSIBLE) JRN(QGPL/ANSIJSNJRN)
      ignore_errors: True
 
    - name: drop the table
      ibmi_sql_execute:
        sql: "drop table ansible"
      ignore_errors: True

    - name: delete journal
      ibmi_cl_command: 
        cmd: QSYS/DLTJRN JRN(QGPL/ANSIJSNJRN) 
      ignore_errors: True

    - name: create default reply list entry for CPA7025
      ibmi_cl_command: 
        cmd: ADDRPYLE SEQNBR(9999) MSGID(CPA7025) RPY(I)
      ignore_errors: True

    - name: delete journal receiver
      ibmi_cl_command: 
        cmd: QSYS/DLTOBJ OBJ(QGPL/ANSIJSNRCV) OBJTYPE(*JRNRCV)
      ignore_errors: True

    - name: remove reply list entry
      ibmi_cl_command: 
        cmd: QSYS/RMVRPYLE SEQNBR(9999)
      ignore_errors: True