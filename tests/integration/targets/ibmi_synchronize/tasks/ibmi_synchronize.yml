# test code for the ibmi_synchronize module and action plugin
# (c) 2020, zhuljbj <zhuljbj@126.com>
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )
#

- name: TC01 sync a SAVF to remote i with all options
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    remote_user: "{{ansible_ssh_user}}"
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result

- name: TC01 assert the returned parameters
  assert:
    that:
      - sync_result.stdout_lines is defined
      - sync_result.stderr_lines is defined
      - sync_result.stderr is defined
      - sync_result.stdout is defined
      - sync_result.delta is defined

- name: TC01 confirm the object can be used
  ibmi_object_restore:
    object_lib: '{{ remote_restored_lib }}'
    savefile_name: "{{ savf_name.split('.')[0] }}"
    savefile_lib: '{{remote_temp_lib}}'
  register: restore_result
  ignore_errors: true 

- name: TC01 confirm the object does exist on the remote lib
  ibmi_sql_query:
    sql: "SELECT OBJNAME, OBJTYPE FROM TABLE (QSYS2.OBJECT_STATISTICS('{{ remote_restored_lib }}', '*ALL' ) );"
  register: sql_result
  failed_when: sql_result.row | length == 0

- name: TC02 sync a SAVF without private_key
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
  delegate_to: '{{delegate_host}}'
  register: sync_result

- name: TC02 dltsavf
  ibmi_cl_command:
    cmd: DLTOBJ OBJ({{remote_temp_lib}}/{{ savf_name.split('.')[0]}}) OBJTYPE(*FILE)

- name: TC02 create savf
  ibmi_cl_command:
    cmd: CRTSAVF {{remote_temp_lib}}/{{ savf_name.split('.')[0]}}
    
- name: TC02 find objects with age=1s size=1k
  ibmi_object_find: 
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
    object_name: "{{ savf_name.split('.')[0]}}"
  register: find_result_org

- name: TC03 sync a SAVF to remote i with all options
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    remote_user: "{{ansible_ssh_user}}"
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'

- name: TC03 find objects with age=1s size=1k
  ibmi_object_find: 
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
    object_name: "{{ savf_name.split('.')[0]}}"
  register: find_result_changed

- name: TC03 assert the object has been overridden
  assert:
    that:
      - find_result_changed.object_list[0].LAST_USED_TIMESTAMP != find_result_org.object_list[0].LAST_USED_TIMESTAMP 
      - find_result_changed.object_list[0].OBJSIZE != find_result_org.object_list[0].OBJSIZE 

- name: TC04 sync a SAVF with an invalid src
  ibmi_synchronize:
    src: 'ABC'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  ignore_errors: true

- name: TC04 assert the returned parameters
  assert:
    that:
      - sync_result.stdout_lines is defined
      - sync_result.stderr_lines is defined
      - sync_result.stderr is defined
      - sync_result.stdout is defined
      - sync_result.delta is defined
      - "'src ABC is not a save file' in sync_result.stderr"

- name: TC05 sync a SAVF with an invalid src
  ibmi_synchronize:
    src: 'ABC.file'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  failed_when: "'src ABC.file must be a ibm i native save file, the path should be absolute, start with /QSYS.LIB' not in sync_result.stderr"

- name: TC06 sync a SAVF with an not existing src
  ibmi_synchronize:
    src: 'ABC.FILE'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  failed_when: "'src ABC.FILE must be a ibm i native save file, the path should be absolute, start with /QSYS.LIB' not in sync_result.stderr"

- name: TC07 sync a SAVF with an invalid dest
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    dest: 'ABC' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  ignore_errors: true
  failed_when: "'dest ABC path should be absolute, start with /QSYS.LIB' not in sync_result.stderr"

- name: TC08 sync a SAVF without dest
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result

- name: TC09 sync with missing required options
  ibmi_synchronize:
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: neg_result
  failed_when: "'src is required' not in neg_result.stderr"

- name: sync with unsupported options
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
    abc: abc
  delegate_to: '{{delegate_host}}'
  register: neg_result
  ignore_errors: true

- name: TC09 assert unsupported parameter
  assert:
    that:
      - "'Invalid options for ibmi_synchronize: abc' in neg_result.msg"

- name: TC10 sync a txt
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ txt_name}}'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  failed_when: "'src /qsys.lib/ARCHLIB.lib/foo.txt is not a save file' not in sync_result.stderr" 

- name: TC11 sync a SAVF to remote i with invalid key
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: 'ABC'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  failed_when: "'Unexpected exception happens. error: [Errno 2] No such file or directory: b\\'ABC\\'. Use -vvv for more information.' not in sync_result.stderr"   

- name: TC12 sync a SAVF to remote i with invalid user
  ibmi_synchronize:
    src: '/qsys.lib/{{remote_temp_lib}}.lib/{{ savf_name}}'
    remote_user: "ABC"
    dest: '/qsys.lib/{{remote_temp_lib}}.lib/' 
    private_key: '/tmp/{{key_name}}'
  delegate_to: '{{delegate_host}}'
  register: sync_result
  failed_when: "'Unexpected exception happens. error: Authentication failed.. Use -vvv for more information' not in sync_result.stderr"   